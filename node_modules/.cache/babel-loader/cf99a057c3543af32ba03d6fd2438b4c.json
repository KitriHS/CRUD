{"ast":null,"code":"import { serviceReport } from '../../services/webServices';\nimport { DO_LIST_REPORT, LIST_REPORT_SUCCESS, LIST_REPORT_FAILED, RESET_FLIGHT_SUCCESS, DO_LOAD_ALL_REPORT, LOAD_ALL_REPORT_SUCCESS, LOAD_ALL_REPORT_FAILED, LOAD_ALL_DASHBOARD_FAILED } from '../../config/constant'; //REPORT ACTION\n\nexport function reportAction(dispatch, params, token) {\n  dispatch(doListReport());\n  return serviceReport(params, token).then(function (res) {\n    dispatch(listReportSuccess(res.data, res.meta));\n  }).catch(function (err) {\n    return dispatch(listReportFailed(false));\n  });\n} //RESET LIST REPORT\n\nexport function resetReportAction(dispatch) {\n  dispatch(resetReportSuccess());\n}\n\nfunction doListReport() {\n  return {\n    type: DO_LIST_REPORT\n  };\n}\n\nfunction listReportSuccess(payload, meta) {\n  return {\n    type: LIST_REPORT_SUCCESS,\n    data: payload,\n    meta: meta\n  };\n}\n\nfunction listReportFailed() {\n  return {\n    type: LIST_REPORT_FAILED\n  };\n}\n\nfunction resetReportSuccess(payload) {\n  return {\n    type: RESET_FLIGHT_SUCCESS,\n    data: payload\n  };\n} //REPORT ALL ACTION\n\n\nexport function loadAllReport(dispatch, params, token) {\n  dispatch(doloadAllReport());\n  return serviceReport(params, token).then(function (res) {\n    dispatch(loadAllReportSuccess(res.data, res.meta));\n  }).catch(function (err) {\n    return dispatch(loadAllReportFailed(false));\n  });\n}\n\nfunction doloadAllReport() {\n  return {\n    type: DO_LOAD_ALL_REPORT\n  };\n}\n\nfunction loadAllReportSuccess(payload, meta) {\n  return {\n    type: LOAD_ALL_REPORT_SUCCESS,\n    data: payload,\n    meta: meta\n  };\n}\n\nfunction loadAllReportFailed() {\n  return {\n    type: LOAD_ALL_DASHBOARD_FAILED\n  };\n}","map":{"version":3,"sources":["/Users/sai04/Documents/Source/cmsaeroaja/src/pages/report/Action.js"],"names":["serviceReport","DO_LIST_REPORT","LIST_REPORT_SUCCESS","LIST_REPORT_FAILED","RESET_FLIGHT_SUCCESS","DO_LOAD_ALL_REPORT","LOAD_ALL_REPORT_SUCCESS","LOAD_ALL_REPORT_FAILED","LOAD_ALL_DASHBOARD_FAILED","reportAction","dispatch","params","token","doListReport","then","res","listReportSuccess","data","meta","catch","err","listReportFailed","resetReportAction","resetReportSuccess","type","payload","loadAllReport","doloadAllReport","loadAllReportSuccess","loadAllReportFailed"],"mappings":"AAAA,SAASA,aAAT,QAA8B,4BAA9B;AACA,SAASC,cAAT,EAAyBC,mBAAzB,EAA8CC,kBAA9C,EAAkEC,oBAAlE,EACEC,kBADF,EACsBC,uBADtB,EAC+CC,sBAD/C,EACuEC,yBADvE,QACuG,uBADvG,C,CAGA;;AACA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,MAAhC,EAAwCC,KAAxC,EAA+C;AACpDF,EAAAA,QAAQ,CAACG,YAAY,EAAb,CAAR;AACA,SAAOb,aAAa,CAACW,MAAD,EAASC,KAAT,CAAb,CACNE,IADM,CACA,UAAAC,GAAG,EAAI;AACZL,IAAAA,QAAQ,CAACM,iBAAiB,CAACD,GAAG,CAACE,IAAL,EAAWF,GAAG,CAACG,IAAf,CAAlB,CAAR;AACD,GAHM,EAINC,KAJM,CAIA,UAAAC,GAAG,EAAI;AACZ,WAAOV,QAAQ,CAACW,gBAAgB,CAAC,KAAD,CAAjB,CAAf;AACD,GANM,CAAP;AAOD,C,CAED;;AACA,OAAO,SAASC,iBAAT,CAA2BZ,QAA3B,EAAoC;AACzCA,EAAAA,QAAQ,CAACa,kBAAkB,EAAnB,CAAR;AACD;;AACD,SAASV,YAAT,GAAwB;AACtB,SAAO;AACLW,IAAAA,IAAI,EAAGvB;AADF,GAAP;AAGD;;AAED,SAASe,iBAAT,CAA2BS,OAA3B,EAAoCP,IAApC,EAA0C;AACxC,SAAO;AACLM,IAAAA,IAAI,EAAEtB,mBADD;AAELe,IAAAA,IAAI,EAAEQ,OAFD;AAGLP,IAAAA,IAAI,EAAEA;AAHD,GAAP;AAKD;;AAED,SAASG,gBAAT,GAA4B;AAC1B,SAAO;AACLG,IAAAA,IAAI,EAAErB;AADD,GAAP;AAGD;;AAED,SAASoB,kBAAT,CAA4BE,OAA5B,EAAqC;AACnC,SAAO;AACLD,IAAAA,IAAI,EAAEpB,oBADD;AAELa,IAAAA,IAAI,EAAEQ;AAFD,GAAP;AAID,C,CAED;;;AACA,OAAO,SAASC,aAAT,CAAuBhB,QAAvB,EAAiCC,MAAjC,EAAyCC,KAAzC,EAAgD;AACrDF,EAAAA,QAAQ,CAACiB,eAAe,EAAhB,CAAR;AACA,SAAO3B,aAAa,CAACW,MAAD,EAASC,KAAT,CAAb,CACNE,IADM,CACA,UAAAC,GAAG,EAAI;AACZL,IAAAA,QAAQ,CAACkB,oBAAoB,CAACb,GAAG,CAACE,IAAL,EAAWF,GAAG,CAACG,IAAf,CAArB,CAAR;AACD,GAHM,EAINC,KAJM,CAIA,UAAAC,GAAG,EAAI;AACZ,WAAOV,QAAQ,CAACmB,mBAAmB,CAAC,KAAD,CAApB,CAAf;AACD,GANM,CAAP;AAOD;;AAED,SAASF,eAAT,GAA2B;AACzB,SAAO;AACLH,IAAAA,IAAI,EAAEnB;AADD,GAAP;AAGD;;AAED,SAASuB,oBAAT,CAA8BH,OAA9B,EAAsCP,IAAtC,EAA2C;AACzC,SAAO;AACLM,IAAAA,IAAI,EAAElB,uBADD;AAELW,IAAAA,IAAI,EAAEQ,OAFD;AAGLP,IAAAA,IAAI,EAAEA;AAHD,GAAP;AAKD;;AAED,SAASW,mBAAT,GAA+B;AAC7B,SAAO;AACLL,IAAAA,IAAI,EAAEhB;AADD,GAAP;AAGD","sourcesContent":["import { serviceReport } from '../../services/webServices';\nimport { DO_LIST_REPORT, LIST_REPORT_SUCCESS, LIST_REPORT_FAILED, RESET_FLIGHT_SUCCESS,\n  DO_LOAD_ALL_REPORT, LOAD_ALL_REPORT_SUCCESS, LOAD_ALL_REPORT_FAILED, LOAD_ALL_DASHBOARD_FAILED} from '../../config/constant'\n\n//REPORT ACTION\nexport function reportAction(dispatch, params, token) {\n  dispatch(doListReport())\n  return serviceReport(params, token)\n  .then( res => {\n    dispatch(listReportSuccess(res.data, res.meta));\n  })\n  .catch(err => {\n    return dispatch(listReportFailed(false))\n  })\n}\n\n//RESET LIST REPORT\nexport function resetReportAction(dispatch){\n  dispatch(resetReportSuccess());\n}\nfunction doListReport() {\n  return {\n    type:  DO_LIST_REPORT\n  }\n}\n\nfunction listReportSuccess(payload, meta) {\n  return {\n    type: LIST_REPORT_SUCCESS,\n    data: payload,\n    meta: meta\n  }\n}\n\nfunction listReportFailed() {\n  return {\n    type: LIST_REPORT_FAILED\n  }\n}\n\nfunction resetReportSuccess(payload) {\n  return {\n    type: RESET_FLIGHT_SUCCESS,\n    data: payload\n  }\n}\n\n//REPORT ALL ACTION\nexport function loadAllReport(dispatch, params, token) {\n  dispatch(doloadAllReport())\n  return serviceReport(params, token)\n  .then( res => {\n    dispatch(loadAllReportSuccess(res.data, res.meta));\n  })\n  .catch(err => {\n    return dispatch(loadAllReportFailed(false))\n  })\n}\n\nfunction doloadAllReport() {\n  return {\n    type: DO_LOAD_ALL_REPORT\n  }\n}\n\nfunction loadAllReportSuccess(payload,meta){\n  return {\n    type: LOAD_ALL_REPORT_SUCCESS,\n    data: payload,\n    meta: meta\n  }\n}\n\nfunction loadAllReportFailed() {\n  return {\n    type: LOAD_ALL_DASHBOARD_FAILED\n  }\n}"]},"metadata":{},"sourceType":"module"}